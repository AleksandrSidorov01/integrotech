const express = require('express');
const mysql = require('mysql2');
const bcrypt = require('bcryptjs');
const multer = require('multer');
const path = require('path');
const session = require('express-session');

const app = express();

// ============================================
// –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–°–°–ò–ô - –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
// ============================================
app.use(session({
    secret: 'integrotech_secret_key_2025', // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Å–µ—Å—Å–∏–π
    resave: false,              // –ù–µ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    saveUninitialized: false,   // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    cookie: { 
        secure: false,          // true —Ç–æ–ª—å–∫–æ –¥–ª—è HTTPS
        maxAge: 24 * 60 * 60 * 1000 // –°–µ—Å—Å–∏—è –∂–∏–≤–µ—Ç 24 —á–∞—Å–∞
    }
}));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ public –∏ –µ—ë –ø–æ–¥–ø–∞–ø–æ–∫
app.use(express.static(path.join(__dirname, 'public')));
app.use('/panel_menu', express.static(path.join(__dirname, 'public', 'panel_menu')));

const upload = multer();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'integrotech'
});

connection.connect(err => {
    if (err) throw err;
    console.log('Connected to MySQL');
});

// ============================================
// MIDDLEWARE –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
// ============================================
/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
 */
function requireAuth(req, res, next) {
    if (req.session && req.session.userId) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Ä–æ–ª–∏ –∏–∑ –ë–î
        connection.query(
            'SELECT id, username, firstName, lastName, email, role FROM users WHERE id = ?', 
            [req.session.userId], 
            (err, results) => {
                if (err || results.length === 0) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return res.redirect('/');
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
                req.user = results[0];
                req.session.userRole = req.user.role; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ —Å–µ—Å—Å–∏–∏
                
                console.log(`üîê –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: ${req.user.username} (${req.user.role})`);
                return next();
            }
        );
    } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return res.redirect('/');
    }
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤
 */
function requireAdmin(req, res, next) {
    requireAuth(req, res, () => {
        if (req.user && req.user.role === 'admin') {
            console.log(`üëë –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø: ${req.user.username}`);
            return next();
        } else {
            console.log(`üö´ –û—Ç–∫–∞–∑ –≤ –∞–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø–µ: ${req.user ? req.user.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} (${req.user ? req.user.role : 'no role'})`);
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.' 
            });
        }
    });
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
 */
function requireModifyRights(req, res, next) {
    requireAuth(req, res, () => {
        if (req.user && (req.user.role === 'admin' || req.user.role === 'employee')) {
            console.log(`‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é: ${req.user.username} (${req.user.role})`);
            return next();
        } else {
            console.log(`üö´ –û—Ç–∫–∞–∑ –≤ –ø—Ä–∞–≤–∞—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${req.user ? req.user.username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} (${req.user ? req.user.role : 'no role'})`);
            return res.status(403).json({ 
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –¢–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ.' 
            });
        }
    });
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
 * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–Ω–µ–ª—å
 */
function redirectIfAuthenticated(req, res, next) {
    if (req.session && req.session.userId) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–∞–Ω–µ–ª—å
        return res.redirect('/panel');
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        return next();
    }
}

// ============================================
// –ú–ê–†–®–†–£–¢–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
// ============================================

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/', redirectIfAuthenticated, (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'login', 'login.html'));
});

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å AJAX –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ —Å–µ—Å—Å–∏—è–º–∏
 */
app.post('/login', upload.none(), (req, res) => {
    if (!req.body || !req.body.username || !req.body.password) {
        return res.status(400).sendFile(path.join(__dirname, 'public', 'login', 'login.html'));
    }

    const { username, password } = req.body;

    // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–°: –ø–æ–ª—É—á–∞–µ–º —Ç–∞–∫–∂–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    connection.query(
        'SELECT id, username, firstName, lastName, email, password, role FROM users WHERE username = ? ORDER BY id DESC LIMIT 1', 
        [username], 
        (err, results) => {
            if (err) {
                console.error('Database error:', err);
                return res.status(500).sendFile(path.join(__dirname, 'public', 'login', 'login.html'));
            }
            
            if (results.length === 0) {
                return res.status(401).sendFile(path.join(__dirname, 'public', 'login', 'login.html'));
            }
            
            const user = results[0];
            
            if (bcrypt.compareSync(password, user.password)) {
                // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–ï–°–°–ò–Ø —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–ª–∏
                req.session.userId = user.id;
                req.session.username = user.username;
                req.session.userRole = user.role;
                req.session.firstName = user.firstName;
                req.session.lastName = user.lastName;
                req.session.loginTime = new Date();
                
                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${user.username} (–†–æ–ª—å: ${user.role})`);
                
                return res.redirect('/panel');
            } else {
                return res.status(401).sendFile(path.join(__dirname, 'public', 'login', 'login.html'));
            }
        }
    );
});

// =====================================================
// API –ú–ê–†–®–†–£–¢ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï
// =====================================================

// –î–û–ë–ê–í–ò–¢–¨ –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç:
app.get('/api/user-info', requireAuth, (req, res) => {
    res.json({
        id: req.user.id,
        username: req.user.username,
        firstName: req.user.firstName,
        lastName: req.user.lastName,
        email: req.user.email,
        role: req.user.role,
        fullName: `${req.user.firstName} ${req.user.lastName}`,
        permissions: {
            canRead: true, // –í—Å–µ –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å
            canCreate: req.user.role === 'admin' || req.user.role === 'employee', // –ê–¥–º–∏–Ω—ã –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å
            canUpdate: req.user.role === 'admin' || req.user.role === 'employee', // –ê–¥–º–∏–Ω—ã –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            canDelete: req.user.role === 'admin', // –¢–û–õ–¨–ö–û –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å
            isAdmin: req.user.role === 'admin',
            isEmployee: req.user.role === 'employee',
            isClient: req.user.role === 'client'
        }
    });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.get('/register', redirectIfAuthenticated, (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'register', 'register.html'));
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.post('/register', (req, res) => {
    if (!req.body || !req.body.username || !req.body.password || !req.body.confirmPassword ||
        !req.body.firstName || !req.body.lastName || !req.body.email) {
        return res.status(400).json({ 
            success: false, 
            message: '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–æ –≤—Å–µ –ø–æ–ª—è' 
        });
    }

    const { username, password, confirmPassword, firstName, lastName, email } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
    if (password !== confirmPassword) {
        return res.status(400).json({ 
            success: false, 
            message: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç' 
        });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    connection.query('SELECT username FROM users WHERE username = ? OR email = ?', [username, email], (err, results) => {
        if (err) {
            console.error('Database error:', err);
            return res.status(500).json({ 
                success: false, 
                message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
            });
        }

        if (results.length > 0) {
            return res.status(400).json({ 
                success: false, 
                message: '–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
            });
        }

        // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const hashedPassword = bcrypt.hashSync(password, 10);

        if (!hashedPassword || hashedPassword === '0') {
            return res.status(500).json({ 
                success: false, 
                message: '–û—à–∏–±–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è' 
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        connection.query(
            'INSERT INTO users (username, password, firstName, lastName, email) VALUES (?, ?, ?, ?, ?)',
            [username, hashedPassword, firstName, lastName, email],
            (err, result) => {
                if (err) {
                    console.error('Insert error:', err);
                    return res.status(500).json({ 
                        success: false, 
                        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + err.message 
                    });
                }

                console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', username, 'ID:', result.insertId);

                // –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                return res.status(200).json({ 
                    success: true, 
                    message: '–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!' 
                });
            }
        );
    });
});

// ============================================
// –ó–ê–©–ò–©–ï–ù–ù–´–ï –ú–ê–†–®–†–£–¢–´ (–¢–†–ï–ë–£–Æ–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò)
// ============================================

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ - –¢–ï–ü–ï–†–¨ –ó–ê–©–ò–©–ï–ù –°–ï–°–°–ò–ï–ô
app.get('/panel', requireAuth, (req, res) => {
    console.log('üîê –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.session.username);
    res.sendFile(path.join(__dirname, 'public', 'panel_menu', 'panel.html'));
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü - –ó–ê–©–ò–©–ï–ù
app.get('/panel/data', requireAuth, (req, res) => {
    const tableName = req.query.table;
    const tableMap = {
        clients: 'clients',
        employees: 'employees',
        reports: 'reports',
        devices: 'devices',
        devicemaintenance: 'devicemaintenance',
        devicedata: 'devicedata',
        dataerrors: 'dataerrors'
    };

    if (!tableMap[tableName]) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã' });
    }

    const sqlTable = tableMap[tableName];
    
    // –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –î–õ–Ø –ö–õ–ò–ï–ù–¢–û–í
    const restrictedForClients = ['employees', 'devicemaintenance', 'dataerrors'];
    
    if (req.user.role === 'client' && restrictedForClients.includes(tableName)) {
        return res.status(403).json({ 
            error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞',
            userRole: req.user.role,
            accessDenied: true
        });
    }
    
    // –ö–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let query = `SELECT * FROM ${sqlTable}`;
    let queryParams = [];
    
    if (req.user.role === 'client') {
        // –ö–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–µ
        if (sqlTable === 'clients') {
            // –ö–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ—é –∑–∞–ø–∏—Å—å
            query += ' WHERE id = ?';
            queryParams = [req.user.id];
        } else if (sqlTable === 'devices' || sqlTable === 'devicedata' || sqlTable === 'reports') {
            // –î–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
            // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–∞ —Å–≤—è–∑—å —á–µ—Ä–µ–∑ client_id
            console.log(`üìä –ö–ª–∏–µ–Ω—Ç ${req.user.username} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç ${sqlTable}`);
        }
    }
    
    connection.query(query, queryParams, (err, results) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö' });
        }
        
        console.log(`üìä ${req.user.username} (${req.user.role}) –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç ${sqlTable}: ${results.length} –∑–∞–ø–∏—Å–µ–π`);
        res.json(results);
    });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ - –ó–ê–©–ò–©–ï–ù
app.post('/panel/data/:table', requireModifyRights, (req, res) => {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    const tableName = req.params.table;
    const tableMap = {
        clients: 'clients',
        employees: 'employees',
        reports: 'reports',
        devices: 'devices',
        devicemaintenance: 'devicemaintenance',
        devicedata: 'devicedata',
        dataerrors: 'dataerrors'
    };

    if (!tableMap[tableName]) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã' });
    }

    const sqlTable = tableMap[tableName];
    const data = req.body;
    let query, values;

    switch (sqlTable) {
        case 'clients':
            query = 'INSERT INTO clients (full_name, email, phone, status) VALUES (?, ?, ?, ?)';
            values = [data.full_name || '', data.email || '', data.phone || '', data.status || '–ê–∫—Ç–∏–≤–µ–Ω'];
            break;
        case 'employees':
            query = 'INSERT INTO employees (full_name, phone, email, position, department) VALUES (?, ?, ?, ?, ?)';
            values = [data.full_name || '', data.phone || '', data.email || '', data.position || '', data.department || ''];
            break;
        case 'reports':
            query = 'INSERT INTO reports (report_name, created_at, content) VALUES (?, ?, ?)';
            values = [data.report_name || '', data.created_at || new Date().toISOString(), data.content || ''];
            break;
        case 'devices':
            query = 'INSERT INTO devices (name, type, status, installation_date) VALUES (?, ?, ?, ?)';
            values = [data.name || '', data.type || '', data.status || '–ê–∫—Ç–∏–≤–µ–Ω', data.installation_date || new Date().toISOString().split('T')[0]];
            break;
        case 'devicemaintenance':
            query = 'INSERT INTO devicemaintenance (serial_number, maintenance_date, maintenance_type, employee_id, description) VALUES (?, ?, ?, ?, ?)';
            values = [data.serial_number || '', data.maintenance_date || new Date().toISOString().split('T')[0], data.maintenance_type || '', data.employee_id || null, data.description || ''];
            break;
        case 'devicedata':
            query = 'INSERT INTO devicedata (serial_number, timestamp, data, status) VALUES (?, ?, ?, ?)';
            values = [data.serial_number || '', data.timestamp || new Date().toISOString(), data.data || '', data.status || ''];
            break;
        case 'dataerrors':
            query = 'INSERT INTO dataerrors (serial_number, error_timestamp, description, status) VALUES (?, ?, ?, ?)';
            values = [data.serial_number || '', data.error_timestamp || new Date().toISOString(), data.description || '', data.status || ''];
            break;
        default:
            return res.status(400).json({ error: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
    }

    connection.query(query, values, (err, result) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', err);
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏' });
        }
        
        console.log(`‚ûï ${req.user.username} (${req.user.role}) –¥–æ–±–∞–≤–∏–ª –∑–∞–ø–∏—Å—å –≤ ${tableName}`);
        res.status(201).json({ success: true, id: result.insertId });
    });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ - –ó–ê–©–ò–©–ï–ù
app.put('/panel/data/:table/:id', requireModifyRights, (req, res) => {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const tableName = req.params.table;
    const id = req.params.id;
    const tableMap = {
        clients: 'clients',
        employees: 'employees',
        reports: 'reports',
        devices: 'devices',
        devicemaintenance: 'devicemaintenance',
        devicedata: 'devicedata',
        dataerrors: 'dataerrors'
    };

    if (!tableMap[tableName]) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã' });
    }

    const sqlTable = tableMap[tableName];
    const data = req.body;
    let query, values;

    switch (sqlTable) {
        case 'clients':
            query = 'UPDATE clients SET full_name = ?, email = ?, phone = ?, status = ? WHERE id = ?';
            values = [data.full_name || '', data.email || '', data.phone || '', data.status || '–ê–∫—Ç–∏–≤–µ–Ω', id];
            break;
        case 'employees':
            query = 'UPDATE employees SET full_name = ?, phone = ?, email = ?, position = ?, department = ? WHERE id = ?';
            values = [data.full_name || '', data.phone || '', data.email || '', data.position || '', data.department || '', id];
            break;
        case 'reports':
            query = 'UPDATE reports SET report_name = ?, created_at = ?, content = ? WHERE id = ?';
            values = [data.report_name || '', data.created_at || new Date().toISOString(), data.content || '', id];
            break;
        case 'devices':
            query = 'UPDATE devices SET name = ?, type = ?, status = ?, installation_date = ? WHERE id = ?';
            values = [data.name || '', data.type || '', data.status || '–ê–∫—Ç–∏–≤–µ–Ω', data.installation_date || new Date().toISOString().split('T')[0], id];
            break;
        case 'devicemaintenance':
            query = 'UPDATE devicemaintenance SET serial_number = ?, maintenance_date = ?, maintenance_type = ?, employee_id = ?, description = ? WHERE id = ?';
            values = [data.serial_number || '', data.maintenance_date || new Date().toISOString().split('T')[0], data.maintenance_type || '', data.employee_id || null, data.description || '', id];
            break;
        case 'devicedata':
            query = 'UPDATE devicedata SET serial_number = ?, timestamp = ?, data = ?, status = ? WHERE id = ?';
            values = [data.serial_number || '', data.timestamp || new Date().toISOString(), data.data || '', data.status || '', id];
            break;
        case 'dataerrors':
            query = 'UPDATE dataerrors SET serial_number = ?, error_timestamp = ?, description = ?, status = ? WHERE id = ?';
            values = [data.serial_number || '', data.error_timestamp || new Date().toISOString(), data.description || '', data.status || '', id];
            break;
        default:
            return res.status(400).json({ error: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
    }

    connection.query(query, values, (err, result) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', err);
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏' });
        }
        if (result.affectedRows === 0) {
            return res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.session.username} –æ–±–Ω–æ–≤–∏–ª –∑–∞–ø–∏—Å—å –≤ ${tableName}`);
        res.json({ success: true });
    });
    console.log(`‚úèÔ∏è ${req.user.username} (${req.user.role}) –∏–∑–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –≤ ${tableName} (ID: ${id})`);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ - –ó–ê–©–ò–©–ï–ù
app.delete('/panel/data/:table/:id', requireAdmin, (req, res) => {
    const tableName = req.params.table;
    const id = req.params.id;
    const tableMap = {
        clients: 'clients',
        employees: 'employees',
        reports: 'reports',
        devices: 'devices',
        devicemaintenance: 'devicemaintenance',
        devicedata: 'devicedata',
        dataerrors: 'dataerrors'
    };

    if (!tableMap[tableName]) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã' });
    }

    const sqlTable = tableMap[tableName];
    const query = `DELETE FROM ${sqlTable} WHERE id = ?`;

    connection.query(query, [id], (err, result) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', err);
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏' });
        }
        if (result.affectedRows === 0) {
            return res.status(404).json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        console.log(`üóëÔ∏è ${req.user.username} (ADMIN) —É–¥–∞–ª–∏–ª –∑–∞–ø–∏—Å—å –∏–∑ ${tableName} (ID: ${id})`);
        res.json({ success: true });
    });
});

// ============================================
// –ú–ê–†–®–†–£–¢ –î–õ–Ø –í–´–•–û–î–ê –ò–ó –°–ò–°–¢–ï–ú–´
// ============================================
app.get('/logout', (req, res) => {
    const username = req.session.username;
    
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–µ—Å—Å–∏—é
    req.session.destroy((err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', err);
            return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ');
        }
        
        console.log('üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', username);
        res.redirect('/');
    });
});

// ============================================
// –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
// ============================================
app.listen(3000, () => {
    console.log('üöÄ Server running on http://localhost:3000');
    console.log('üîê Sessions enabled for security');
});